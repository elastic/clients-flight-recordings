{
  "api": "nodes.hot_threads",
  "file": "/test/free/nodes.hot_threads/10_basic.yml",
  "name": "Nodes hot threads - WAIT",
  "origin": "yaml",
  "request": {
    "args": {
      "type": "wait"
    }
  },
  "response": {
    "headers": {
      "content-encoding": "gzip",
      "content-type": "text/plain; charset=UTF-8",
      "transfer-encoding": "chunked",
      "x-elastic-product": "Elasticsearch"
    },
    "payload": "::: {instance}{wkCrg6ArS0KaNpNJj1BsxQ}{mU0YgLyvRAqVYo5GDdVrgg}{instance}{172.18.0.2}{172.18.0.2:9300}{cdfhilmrstw}{8.18.0}{7000099-8525000}{ml.machine_memory=15705829376, ml.allocated_processors_double=4.0, testattr=test, transform.config_version=10.0.0, xpack.installed=true, ml.allocated_processors=4, ml.max_jvm_size=1073741824, ml.config_version=12.0.0}\n   Hot threads at 2025-01-20T10:19:37.324Z, interval=500ms, busiestThreads=3, ignoreIdleThreads=true:\n   \n   100.4% (502ms out of 500ms) wait usage by thread 'elasticsearch[keepAlive/8.18.0]'\n     10/10 snapshots sharing following 9 elements\n       java.base@23/jdk.internal.misc.Unsafe.park(Native Method)\n       java.base@23/java.util.concurrent.locks.LockSupport.park(LockSupport.java:221)\n       java.base@23/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:754)\n       java.base@23/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1099)\n       java.base@23/java.util.concurrent.CountDownLatch.await(CountDownLatch.java:230)\n       app/org.elasticsearch.server@8.18.0-SNAPSHOT/org.elasticsearch.bootstrap.Elasticsearch.lambda$new$5(Elasticsearch.java:476)\n       app/org.elasticsearch.server@8.18.0-SNAPSHOT/org.elasticsearch.bootstrap.Elasticsearch$$Lambda/0x00007fd40426d780.run(Unknown Source)\n       java.base@23/java.lang.Thread.runWith(Thread.java:1588)\n       java.base@23/java.lang.Thread.run(Thread.java:1575)\n\n",
    "statusCode": 200
  }
}