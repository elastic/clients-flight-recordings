{
  "api": "ingest.get_pipeline",
  "file": "/test/free/ingest/10_basic.yml",
  "name": "Test Get All Pipelines",
  "origin": "yaml",
  "request": {
    "args": {
    }
  },
  "response": {
    "headers": {
      "content-encoding": "gzip",
      "content-length": "3122",
      "content-type": "application/json",
      "x-elastic-product": "Elasticsearch"
    },
    "payload": {
      "apm@pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in ingest pipeline for all APM data streams.\n",
        "processors": [
          {
            "rename": {
              "field": "process.ppid",
              "ignore_failure": true,
              "ignore_missing": true,
              "target_field": "process.parent.pid"
            }
          },
          {
            "geoip": {
              "database_file": "GeoLite2-City.mmdb",
              "download_database_on_pipeline_creation": false,
              "field": "client.ip",
              "ignore_missing": true,
              "on_failure": [
                {
                  "remove": {
                    "field": "client.ip"
                  }
                }
              ],
              "target_field": "client.geo"
            }
          },
          {
            "user_agent": {
              "field": "user_agent.original",
              "ignore_failure": true,
              "ignore_missing": true,
              "target_field": "user_agent"
            }
          },
          {
            "script": {
              "description": "Add time when event was ingested (and remove sub-seconds to improve storage efficiency)",
              "ignore_failure": true,
              "source": "if (ctx?.event == null) {\n  ctx.event = [:];\n}\n\nctx.event.ingested = metadata().now.withNano(0).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);",
              "tag": "truncate-subseconds-event-ingested"
            }
          }
        ],
        "version": 10
      },
      "behavioral_analytics-events-final_pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in ingest pipeline applied by default as final pipeline to behavioral analytics event data streams.",
        "processors": [
          {
            "set": {
              "copy_from": "session.id",
              "field": "_routing"
            }
          },
          {
            "uri_parts": {
              "field": "page.url",
              "ignore_missing": true,
              "target_field": "page.url"
            }
          },
          {
            "uri_parts": {
              "field": "page.referrer",
              "ignore_missing": true,
              "target_field": "page.referrer"
            }
          },
          {
            "foreach": {
              "field": "search.results.items",
              "ignore_missing": true,
              "processor": {
                "uri_parts": {
                  "field": "_ingest._value.page.url",
                  "ignore_missing": true,
                  "target_field": "_ingest._value.page.url"
                }
              }
            }
          },
          {
            "user_agent": {
              "extract_device_type": true,
              "field": "session.user_agent",
              "ignore_missing": true,
              "properties": [
                "name",
                "version",
                "os",
                "device"
              ],
              "target_field": "session.user_agent"
            }
          },
          {
            "rename": {
              "field": "session.user_agent.name",
              "ignore_missing": true,
              "target_field": "session.user_agent.browser.name"
            }
          },
          {
            "rename": {
              "field": "session.user_agent.version",
              "ignore_missing": true,
              "target_field": "session.user_agent.browser.version"
            }
          },
          {
            "geoip": {
              "download_database_on_pipeline_creation": false,
              "field": "session.ip",
              "ignore_missing": true,
              "target_field": "session.location"
            }
          },
          {
            "remove": {
              "field": "session.ip",
              "ignore_missing": true
            }
          }
        ],
        "version": 3
      },
      "ent-search-generic-ingestion": {
        "_meta": {
          "managed": true,
          "managed_by": "Enterprise Search"
        },
        "description": "Generic Enterprise Search ingest pipeline",
        "processors": [
          {
            "attachment": {
              "description": "Extract text from binary attachments",
              "field": "_attachment",
              "if": "ctx?._extract_binary_content == true",
              "ignore_missing": true,
              "indexed_chars_field": "_attachment_indexed_chars",
              "on_failure": [
                {
                  "append": {
                    "description": "Record error information",
                    "field": "_ingestion_errors",
                    "value": "Processor 'attachment' in pipeline '{{ _ingest.on_failure_pipeline }}' failed with message '{{ _ingest.on_failure_message }}'"
                  }
                }
              ],
              "remove_binary": false,
              "target_field": "_extracted_attachment"
            }
          },
          {
            "set": {
              "copy_from": "_extracted_attachment.content",
              "description": "Set any extracted text on the 'body' field",
              "field": "body",
              "if": "ctx?._extract_binary_content == true",
              "ignore_empty_value": true,
              "on_failure": [
                {
                  "append": {
                    "description": "Record error information",
                    "field": "_ingestion_errors",
                    "value": "Processor 'set' with tag 'set_body' in pipeline '{{ _ingest.on_failure_pipeline }}' failed with message '{{ _ingest.on_failure_message }}'"
                  }
                }
              ],
              "tag": "set_body"
            }
          },
          {
            "gsub": {
              "description": "Remove unicode 'replacement' characters",
              "field": "body",
              "if": "ctx?._extract_binary_content == true",
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "description": "Record error information",
                    "field": "_ingestion_errors",
                    "value": "Processor 'gsub' with tag 'remove_replacement_chars' in pipeline '{{ _ingest.on_failure_pipeline }}' failed with message '{{ _ingest.on_failure_message }}'"
                  }
                }
              ],
              "pattern": "ï¿½",
              "replacement": "",
              "tag": "remove_replacement_chars"
            }
          },
          {
            "gsub": {
              "description": "Squish whitespace",
              "field": "body",
              "if": "ctx?._reduce_whitespace == true",
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "description": "Record error information",
                    "field": "_ingestion_errors",
                    "value": "Processor 'gsub' with tag 'remove_extra_whitespace' in pipeline '{{ _ingest.on_failure_pipeline }}' failed with message '{{ _ingest.on_failure_message }}'"
                  }
                }
              ],
              "pattern": "\\s+",
              "replacement": " ",
              "tag": "remove_extra_whitespace"
            }
          },
          {
            "trim": {
              "description": "Trim leading and trailing whitespace",
              "field": "body",
              "if": "ctx?._reduce_whitespace == true",
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "description": "Record error information",
                    "field": "_ingestion_errors",
                    "value": "Processor 'trim' in pipeline '{{ _ingest.on_failure_pipeline }}' failed with message '{{ _ingest.on_failure_message }}'"
                  }
                }
              ]
            }
          },
          {
            "remove": {
              "description": "Remove meta fields",
              "field": [
                "_attachment",
                "_attachment_indexed_chars",
                "_extracted_attachment",
                "_extract_binary_content",
                "_reduce_whitespace",
                "_run_ml_inference"
              ],
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "description": "Record error information",
                    "field": "_ingestion_errors",
                    "value": "Processor 'remove' with tag 'remove_meta_fields' in pipeline '{{ _ingest.on_failure_pipeline }}' failed with message '{{ _ingest.on_failure_message }}'"
                  }
                }
              ],
              "tag": "remove_meta_fields"
            }
          }
        ],
        "version": 3
      },
      "first_pipeline": {
        "description": "first",
        "processors": [
        ]
      },
      "logs-apm.app@default-pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in default ingest pipeline for logs-apm.app.*-* data streams.\n\nThis pipeline exists purely for routing, which cannot be\nperformed in a final pipeline, and for invoking user-defined\ncustom pipelines. All built-in processing occurs in the final\npipelines.\n",
        "processors": [
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "global@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "logs@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "logs-apm.app@custom"
            }
          }
        ],
        "version": 10
      },
      "logs-apm.error@default-pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in default ingest pipeline for logs-apm.error-* data streams.\n\nThis pipeline exists purely for routing, which cannot be\nperformed in a final pipeline, and for invoking user-defined\ncustom pipelines. All built-in processing occurs in the final\npipelines.\n",
        "processors": [
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "global@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "logs@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "logs-apm.error@custom"
            }
          }
        ],
        "version": 10
      },
      "logs-default-pipeline": {
        "_meta": {
          "description": "default pipeline for the logs index template installed by x-pack",
          "managed": true
        },
        "deprecated": true,
        "processors": [
          {
            "set": {
              "copy_from": "_ingest.timestamp",
              "description": "If '@timestamp' is missing, set it with the ingest timestamp",
              "field": "@timestamp",
              "override": false
            }
          },
          {
            "pipeline": {
              "description": "A custom pipeline for logs data streams, which does not exist by default, but can be added if additional processing is required",
              "ignore_missing_pipeline": true,
              "name": "logs@custom"
            }
          }
        ],
        "version": 5
      },
      "logs@default-pipeline": {
        "_meta": {
          "description": "default pipeline for the logs index template installed by x-pack",
          "managed": true
        },
        "deprecated": false,
        "processors": [
          {
            "set": {
              "copy_from": "_ingest.timestamp",
              "description": "If '@timestamp' is missing, set it with the ingest timestamp",
              "field": "@timestamp",
              "override": false
            }
          },
          {
            "pipeline": {
              "description": "A custom pipeline for logs data streams, which does not exist by default, but can be added if additional processing is required",
              "ignore_missing_pipeline": true,
              "name": "logs@custom"
            }
          }
        ],
        "version": 14
      },
      "logs@json-message": {
        "_meta": {
          "description": "automatic parsing of JSON log messages",
          "managed": true
        },
        "deprecated": true,
        "processors": [
          {
            "rename": {
              "field": "message",
              "if": "ctx.message instanceof String && ctx.message.startsWith('{') && ctx.message.endsWith('}')",
              "ignore_missing": true,
              "target_field": "_tmp_json_message"
            }
          },
          {
            "json": {
              "add_to_root": true,
              "add_to_root_conflict_strategy": "merge",
              "allow_duplicate_keys": true,
              "field": "_tmp_json_message",
              "if": "ctx._tmp_json_message != null",
              "on_failure": [
                {
                  "rename": {
                    "field": "_tmp_json_message",
                    "ignore_missing": true,
                    "target_field": "message"
                  }
                }
              ]
            }
          },
          {
            "dot_expander": {
              "field": "*",
              "if": "ctx._tmp_json_message != null",
              "override": true
            }
          },
          {
            "remove": {
              "field": "_tmp_json_message",
              "ignore_missing": true
            }
          }
        ],
        "version": 5
      },
      "logs@json-pipeline": {
        "_meta": {
          "description": "automatic parsing of JSON log messages",
          "managed": true
        },
        "deprecated": false,
        "processors": [
          {
            "rename": {
              "field": "message",
              "if": "ctx.message instanceof String && ctx.message.startsWith('{') && ctx.message.endsWith('}')",
              "ignore_missing": true,
              "target_field": "_tmp_json_message"
            }
          },
          {
            "json": {
              "add_to_root": true,
              "add_to_root_conflict_strategy": "merge",
              "allow_duplicate_keys": true,
              "field": "_tmp_json_message",
              "if": "ctx._tmp_json_message != null",
              "on_failure": [
                {
                  "rename": {
                    "field": "_tmp_json_message",
                    "ignore_missing": true,
                    "target_field": "message"
                  }
                }
              ]
            }
          },
          {
            "dot_expander": {
              "field": "*",
              "if": "ctx._tmp_json_message != null",
              "override": true
            }
          },
          {
            "remove": {
              "field": "_tmp_json_message",
              "ignore_missing": true
            }
          }
        ],
        "version": 14
      },
      "metrics-apm.app@default-pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in default ingest pipeline for metrics-apm.app.*-* data streams.\n\nThis pipeline exists purely for routing, which cannot be\nperformed in a final pipeline, and for invoking user-defined\ncustom pipelines. All built-in processing occurs in the final\npipelines.\n",
        "processors": [
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "global@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "metrics@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "metrics-apm.app@custom"
            }
          }
        ],
        "version": 10
      },
      "metrics-apm.internal@default-pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in default ingest pipeline for metrics-apm.internal-* data streams.\n\nThis pipeline exists purely for routing, which cannot be\nperformed in a final pipeline, and for invoking user-defined\ncustom pipelines. All built-in processing occurs in the final\npipelines.\n",
        "processors": [
          {
            "set": {
              "field": "metricset.interval",
              "if": "ctx.metricset?.name == 'transaction' || ctx.metricset?.name == 'service_destination'",
              "override": false,
              "value": "1m"
            }
          },
          {
            "reroute": {
              "dataset": "apm.transaction.1m",
              "if": "ctx.metricset?.name == 'transaction'"
            }
          },
          {
            "reroute": {
              "dataset": "apm.service_destination.1m",
              "if": "ctx.metricset?.name == 'service_destination'"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "global@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "metrics@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "metrics-apm.internal@custom"
            }
          }
        ],
        "version": 10
      },
      "metrics-apm.service_destination@default-pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in default ingest pipeline for metrics-apm.service_destination.*-*\ndata streams.\n\nThis pipeline exists purely for routing, which cannot be\nperformed in a final pipeline, and for invoking user-defined\ncustom pipelines. All built-in processing occurs in the final\npipelines.\n",
        "processors": [
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "global@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "metrics@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "metrics-apm.service_destination@custom"
            }
          }
        ],
        "version": 10
      },
      "metrics-apm.service_summary@default-pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in default ingest pipeline for metrics-apm.service_summary.*-*\ndata streams.\n\nThis pipeline exists purely for routing, which cannot be\nperformed in a final pipeline, and for invoking user-defined\ncustom pipelines. All built-in processing occurs in the final\npipelines.\n",
        "processors": [
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "global@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "metrics@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "metrics-apm.service_summary@custom"
            }
          }
        ],
        "version": 10
      },
      "metrics-apm.service_transaction@default-pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in default ingest pipeline for metrics-apm.service_transaction.*-*\ndata streams.\n\nThis pipeline exists purely for routing, which cannot be\nperformed in a final pipeline, and for invoking user-defined\ncustom pipelines. All built-in processing occurs in the final\npipelines.\n",
        "processors": [
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "global@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "metrics@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "metrics-apm.service_transaction@custom"
            }
          }
        ],
        "version": 10
      },
      "metrics-apm.transaction@default-pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in default ingest pipeline for metrics-apm.transaction.*-*\ndata streams.\n\nThis pipeline exists purely for routing, which cannot be\nperformed in a final pipeline, and for invoking user-defined\ncustom pipelines. All built-in processing occurs in the final\npipelines.\n",
        "processors": [
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "global@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "metrics@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "metrics-apm.transaction@custom"
            }
          }
        ],
        "version": 10
      },
      "metrics-apm@pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in ingest pipeline for metrics-apm.*-* data streams",
        "processors": [
          {
            "script": {
              "if": "ctx._metric_descriptions != null",
              "source": "Map dynamic_templates = new HashMap();\nfor (entry in ctx._metric_descriptions.entrySet()) {\n  String name = entry.getKey();\n  Map description = entry.getValue();\n  String metric_type = description.type;\n  if (metric_type == \"histogram\") {\n    dynamic_templates[name] = \"histogram_metrics\";\n  } else if (metric_type == \"summary\") {\n    dynamic_templates[name] = \"summary_metrics\";\n  } else {\n    dynamic_templates[name] = \"double_metrics\";\n  }\n}\nctx._dynamic_templates = dynamic_templates;\nctx.remove(\"_metric_descriptions\");\n"
            }
          },
          {
            "script": {
              "if": "ctx.metricset?.samples != null",
              "source": "Map dynamic_templates = new HashMap();\nfor (sample in ctx.metricset.samples) {\n  String name = sample.name;\n  String metric_type = sample.type;\n  if (metric_type == \"histogram\") {\n    dynamic_templates[name] = \"histogram_metrics\";\n    ctx.put(name, [\"values\": sample.values, \"counts\": sample.counts]);\n  } else if (metric_type == \"summary\") {\n    dynamic_templates[name] = \"summary_metrics\";\n    ctx.put(name, [\"value_count\": sample.value_count, \"sum\": sample.sum]);\n  } else {\n    dynamic_templates[name] = \"double_metrics\";\n    ctx.put(name, sample.value);\n  }\n}\nctx._dynamic_templates = dynamic_templates;\nctx.metricset.remove(\"samples\");\n"
            }
          },
          {
            "pipeline": {
              "name": "apm@pipeline"
            }
          }
        ],
        "version": 10
      },
      "my_deprecated_pipeline": {
        "deprecated": true,
        "processors": [
        ]
      },
      "search-default-ingestion": {
        "_meta": {
          "managed": true,
          "managed_by": "Search"
        },
        "description": "Default search ingest pipeline",
        "processors": [
          {
            "attachment": {
              "description": "Extract text from binary attachments",
              "field": "_attachment",
              "if": "ctx?._extract_binary_content == true",
              "ignore_missing": true,
              "indexed_chars_field": "_attachment_indexed_chars",
              "on_failure": [
                {
                  "append": {
                    "description": "Record error information",
                    "field": "_ingestion_errors",
                    "value": "Processor 'attachment' in pipeline '{{ _ingest.on_failure_pipeline }}' failed with message '{{ _ingest.on_failure_message }}'"
                  }
                }
              ],
              "remove_binary": false,
              "target_field": "_extracted_attachment"
            }
          },
          {
            "set": {
              "copy_from": "_extracted_attachment.content",
              "description": "Set any extracted text on the 'body' field",
              "field": "body",
              "if": "ctx?._extract_binary_content == true",
              "ignore_empty_value": true,
              "on_failure": [
                {
                  "append": {
                    "description": "Record error information",
                    "field": "_ingestion_errors",
                    "value": "Processor 'set' with tag 'set_body' in pipeline '{{ _ingest.on_failure_pipeline }}' failed with message '{{ _ingest.on_failure_message }}'"
                  }
                }
              ],
              "tag": "set_body"
            }
          },
          {
            "gsub": {
              "description": "Remove unicode 'replacement' characters",
              "field": "body",
              "if": "ctx?._extract_binary_content == true",
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "description": "Record error information",
                    "field": "_ingestion_errors",
                    "value": "Processor 'gsub' with tag 'remove_replacement_chars' in pipeline '{{ _ingest.on_failure_pipeline }}' failed with message '{{ _ingest.on_failure_message }}'"
                  }
                }
              ],
              "pattern": "ï¿½",
              "replacement": "",
              "tag": "remove_replacement_chars"
            }
          },
          {
            "gsub": {
              "description": "Squish whitespace",
              "field": "body",
              "if": "ctx?._reduce_whitespace == true",
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "description": "Record error information",
                    "field": "_ingestion_errors",
                    "value": "Processor 'gsub' with tag 'remove_extra_whitespace' in pipeline '{{ _ingest.on_failure_pipeline }}' failed with message '{{ _ingest.on_failure_message }}'"
                  }
                }
              ],
              "pattern": "\\s+",
              "replacement": " ",
              "tag": "remove_extra_whitespace"
            }
          },
          {
            "trim": {
              "description": "Trim leading and trailing whitespace",
              "field": "body",
              "if": "ctx?._reduce_whitespace == true",
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "description": "Record error information",
                    "field": "_ingestion_errors",
                    "value": "Processor 'trim' in pipeline '{{ _ingest.on_failure_pipeline }}' failed with message '{{ _ingest.on_failure_message }}'"
                  }
                }
              ]
            }
          },
          {
            "remove": {
              "description": "Remove meta fields",
              "field": [
                "_attachment",
                "_attachment_indexed_chars",
                "_extracted_attachment",
                "_extract_binary_content",
                "_reduce_whitespace",
                "_run_ml_inference"
              ],
              "ignore_missing": true,
              "on_failure": [
                {
                  "append": {
                    "description": "Record error information",
                    "field": "_ingestion_errors",
                    "value": "Processor 'remove' with tag 'remove_meta_fields' in pipeline '{{ _ingest.on_failure_pipeline }}' failed with message '{{ _ingest.on_failure_message }}'"
                  }
                }
              ],
              "tag": "remove_meta_fields"
            }
          }
        ],
        "version": 3
      },
      "second_pipeline": {
        "description": "second",
        "processors": [
        ]
      },
      "traces-apm.rum@default-pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in default ingest pipeline for traces-apm.rum-* data streams.\n\nThis pipeline exists purely for routing, which cannot be\nperformed in a final pipeline, and for invoking user-defined\ncustom pipelines. All built-in processing occurs in the final\npipeline.\n",
        "processors": [
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "global@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "traces@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "traces-apm.rum@custom"
            }
          }
        ],
        "version": 10
      },
      "traces-apm@default-pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in default ingest pipeline for traces-apm-* data streams.\n\nThis pipeline exists purely for routing, which cannot be\nperformed in a final pipeline, and for invoking user-defined\ncustom pipelines. All built-in processing occurs in the final\npipeline.\n",
        "processors": [
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "global@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "traces@custom"
            }
          },
          {
            "pipeline": {
              "ignore_missing_pipeline": true,
              "name": "traces-apm@custom"
            }
          }
        ],
        "version": 10
      },
      "traces-apm@pipeline": {
        "_meta": {
          "managed": true
        },
        "description": "Built-in ingest pipeline for traces-apm-* data streams",
        "processors": [
          {
            "set": {
              "field": "processor.event",
              "if": "ctx.transaction?.type != null",
              "value": "transaction"
            }
          },
          {
            "set": {
              "field": "processor.event",
              "override": false,
              "value": "span"
            }
          },
          {
            "script": {
              "if": "ctx[ctx.processor.event]?.duration == null",
              "source": "def eventDuration = ctx.event?.duration ?: 0;\ndef rootObjectName = ctx.processor?.event;\ndef rootObject = ctx[rootObjectName];\nif (rootObject == null) {\n  rootObject = [:];\n  ctx[rootObjectName] = rootObject;\n}\nrootObject.duration = [\"us\": (long)(eventDuration/1000)];\n"
            }
          },
          {
            "remove": {
              "field": [
                "event.duration"
              ],
              "ignore_failure": true,
              "ignore_missing": true
            }
          },
          {
            "set": {
              "field": "event.success_count",
              "if": "ctx.event?.outcome == 'success'",
              "value": 1
            }
          },
          {
            "set": {
              "field": "event.success_count",
              "if": "ctx.event?.outcome == 'failure'",
              "value": 0
            }
          },
          {
            "pipeline": {
              "name": "apm@pipeline"
            }
          }
        ],
        "version": 10
      }
    },
    "statusCode": 200
  }
}